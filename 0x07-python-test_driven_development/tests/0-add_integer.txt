# command for test: python3 -m doctest -v ./tests/0-add_integer.txt

import method to test
>>> add_integer = __import__('0-add_integer').add_integer

SUCCESS CASES:

Test case - signed and unsigned ints and floats:
     >>> print(add_integer(1, 2))
     3
     >>> print(add_integer(-10, 2))
     -8
     >>> print(add_integer(4.5, 1.5))
     5
     >>> print(add_integer(21, -23.9))
     -2

Test case - default b=98 value:
     >>> print(add_integer(3))
     101

FAILURE CASES:

Test case - no args:
     >>> print(add_integer(None))
     Traceback (most recent call last):
     ...
     TypeError: a must be an integer
     >>> print(add_integer(None, None))
     Traceback (most recent call last):
     ...
     TypeError: a must be an integer

Test case - extra args:
     >>> print(add_integer(1, 2, 3))
     Traceback (most recent call last):
     ...
     TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

Test case - other data types:
     >>> print(add_integer("hey"))
     Traceback (most recent call last):
     ...
     TypeError: a must be an integer
     >>> print(add_integer(0, [1, 2, 3]))
     Traceback (most recent call last):
     ...
     TypeError: b must be an integer

Test case - special float NaN in Python (Not a Number):
     >>> print(add_integer(float("NaN")))
     Traceback (most recent call last):
     ...
     ValueError: cannot convert float NaN to integer

Test case - max/min numbers Python can handle ("inf" is infinity):
     >>> print(add_integer(float("inf")))
     Traceback (most recent call last):
     ...
     OverflowError: cannot convert float infinity to integer
     >>> print(add_integer(float("-inf")))
     Traceback (most recent call last):
     ...
     OverflowError: cannot convert float infinity to integer
